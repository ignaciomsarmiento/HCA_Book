[["flujo-de-trabajo-reproducible.html", " 4 Flujo de Trabajo Reproducible 4.1 Flujos de Trabajo 4.2 Flujos de Trabajo: Estructura de Proyectos", " 4 Flujo de Trabajo Reproducible La ciencia empírica a menudo requiere miles o decenas de miles de líneas de código, poco o nada de lo cual aparece en el artículo publicado resultante. De aquí surge el principio de Claerbout: ``An article about computational science in a scientific publication is not the scholarship itself, it is merely advertising of the scholarship. The actual scholarship is the complete software development environment and the complete set of instructions which generated the figures’’ (“Un artículo sobre ciencia computacional en una publicación científica no es la beca en sí, sino simplemente una publicidad de la beca. La verdadera beca es el entorno completo de desarrollo de software y el conjunto completo de instrucciones que generaron las figuras” (Buckheit y Donoho 1995)”. No vemos razón para detenernos solo en las figuras o gráficos. El mismo principio se aplica a nuestras tablas de análisis, coeficientes, errores estándar, pruebas estadísticas, y así sucesivamente. Por lo tanto, para trabajar de manera transparente, los investigadores deben adoptar tanto las técnicas estadísticas y metodológicas reproducibles discutidas en este libro, como las prácticas de flujo de trabajo y software que hagan que su trabajo sea fácilmente reproducible por otros académicos. El objetivo de este capítulo es introducir las prácticas más importantes en este ámbito. Hay varias herramientas principales que los investigadores pueden utilizar para asegurarse de que su trabajo sea reproducible. A continuación, discutimos las prácticas de flujo de trabajo. Al usar estas herramientas, un investigador se acercará al ideal de reproducibilidad de “flujo de trabajo de un solo clic”: podrá volver a ejecutar todo el análisis (realizado anteriormente por otro investigador) desde cero con un solo clic o la ejecución de un solo script. 4.0.1 Reproducibilidad vs Replicabilidad .footnote[Imagen: The Turing Way Community, &amp; Scriberia (2020)] Reproducibilidad entonces quiere decir que los resultados se mantienen idénticos si los códigos o los datos no han cambiado. Sin embargo, no es trivial saber si algo a cambiado en el tiempo Git te permite hacer ambas cosas: saber si algo cambió y volver en el tiempo. Mas sobre esto en el proximo capitulo 4.1 Flujos de Trabajo El código es solo un aspecto de una estructura más amplia que denominamos “flujo de trabajo”, que abarca la combinación de datos, código, organización y documentación. Todo, desde los nombres de archivos y variables hasta la organización de carpetas, el almacenamiento de datos y la programación eficiente y legible, forma parte del flujo de trabajo. .footnote[Imagen: The Turing Way Community, &amp; Scriberia (2020)] 4.2 Flujos de Trabajo: Estructura de Proyectos Un punto de partida natural para describir un buen flujo de trabajo es detallar una estructura básica de carpetas en el computador, nuestra sugerencia inspirada por Gentzgow y Shapiro (XXX) es la siguiente. Complex Project Folder Estructure/ ├── build &lt;- construcción de los datos │ └── input/ │ └── my_data.csv │ └── scripts/ │ └── clean_data.R │ └── output/ │ └── data_clean.csv │ └── temp/ │ └── temp_merge.csv ├── analysis &lt;- análisis de los datos │ └── input/ │ └── data_clean.csv │ └── scripts/ │ └── regressions_table1.R │ └── regressions_fig1.R │ └── output/ │ └── fig1.png │ └── table1.tex │ └── temp/ │ └── regressions.log └── Document &lt;- Document └── Document.Rmd &lt;- script documento dinámico Por supuesto, los detalles variarán para diferentes tipos de investigación y los gustos de diferentes académicos, pero muchos proyectos pueden tener una estructura de archivos similar a la organización básica mostrada aquí. En primer lugar, necesita crear una carpeta maestra con un nombre corto pero descriptivo para el proyecto, un nombre que sea significativo tanto para usted como para sus colaboradores. (Pero por favor, no nombre la carpeta con el apellido de su coautor; ese no será un nombre de proyecto muy útil para ellos, ¿verdad?) 4.2.1 Creando la Estructura de Proyecto automaticamente Una opción para la creación de esta estructura es simplemente tener un script que lo hace por nosotros. Para ello utilizaremos un script en Bash que crea la estructura de carpetas descriptas anteriormente. #!/bin/bash # Crear directorios de nivel superior mkdir -p 01_build 02_analysis 03_document # Crear subdirectorios dentro de build y analysis for dir in 01_build 02_analysis do mkdir -p ./$dir/01_input mkdir -p ./$dir/02_scripts mkdir -p ./$dir/03_output mkdir -p ./$dir/04_temp done # Navegar al directorio 02_analysis/03_output y crear subdirectorios cd 02_analysis/03_output mkdir -p Figures Tables echo &quot;¡Carpetas creadas exitosamente!&quot; El script realiza 5 operaciones Shebang (#!/bin/bash): Indica que el script debe ejecutarse con Bash. Creación de directorios de nivel superior: mkdir -p 01_build 02_analysis 03_document crea tres carpetas principales: 01_build, 02_analysis, y 03_document. Creación de subdirectorios: Un bucle for recorre los directorios 01_build y 02_analysis, creando cuatro subcarpetas dentro de cada uno: 01_input, 02_scripts, 03_output, y 04_temp. Navegar y crear más subdirectorios: El script navega a 02_analysis/03_output y crea dos subcarpetas más: Figures y Tables. Mensaje de confirmación: echo \"¡Carpetas creadas exitosamente!\" imprime un mensaje indicando que el proceso se ha completado. 4.2.1.1 Cómo Ejecutar el Script en Windows Sí, puedes usar GitHub Desktop para instalar Git Bash y ejecutar scripts de Bash en Windows. Aquí están las instrucciones detalladas: 4.2.2 Instrucciones para Ejecutar el Script en Windows Usando GitHub Desktop 4.2.2.1 Paso 1: Instalar GitHub Desktop Descargar e Instalar GitHub Desktop: Ve a desktop.github.com y descarga GitHub Desktop. Sigue las instrucciones de instalación. 4.2.2.2 Paso 2: Crear y Guardar el Script Abrir un Editor de Texto: Abre Notepad o cualquier editor de texto. Copiar y Pegar el Script: Copia el siguiente script en el editor: #!/bin/bash # Crear directorios de nivel superior mkdir -p 01_build 02_analysis 03_document # Crear subdirectorios dentro de build y analysis for dir in 01_build 02_analysis do mkdir -p ./$dir/01_input mkdir -p ./$dir/02_scripts mkdir -p ./$dir/03_output mkdir -p ./$dir/04_temp done # Navegar al directorio 02_analysis/03_output y crear subdirectorios cd 02_analysis/03_output mkdir -p Figures Tables echo &quot;¡Carpetas creadas exitosamente!&quot; Guardar el Archivo: Guarda el archivo con la extensión .sh, por ejemplo, create_folders.sh. 4.2.2.3 Paso 3: Ejecutar el Script Usando Git Bash Abrir Git Bash: Abre GitHub Desktop desde el menú de inicio. Ve a File &gt; Options y asegúrate de que Git Bash está seleccionado como tu terminal predeterminada. Luego, haz clic en el botón de terminal en la esquina superior derecha de GitHub Desktop (ícono de terminal) para abrir Git Bash. Navegar al Directorio del Script: Usa el comando cd para ir al directorio donde guardaste el script. Por ejemplo: cd /c/Users/TuUsuario/PathToScript Hacer el Script Ejecutable: Ejecuta: chmod +x create_folders.sh Ejecutar el Script: Ejecuta: ./create_folders.sh 4.2.3 Cómo Ejecutar el Script en Mac Crear y Guardar el Script: Abre un editor de texto (como TextEdit), copia el script y guárdalo con la extensión .sh (por ejemplo, create_folders.sh). Abrir la Terminal: Ve a Aplicaciones &gt; Utilidades &gt; Terminal. Navegar al Directorio del Script: Usa el comando cd para ir al directorio donde guardaste el script, por ejemplo: cd /Users/TuUsuario/PathToScript Hacer el Script Ejecutable: Ejecuta: chmod +x create_folders.sh Ejecutar el Script: Ejecuta: ./create_folders.sh "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
